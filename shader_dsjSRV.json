{
 "ver": "0.1",
 "info": {
  "id": "dsjSRV",
  "date": "0",
  "viewed": 0,
  "name": "#1_stars",
  "description": "practice 1",
  "likes": 0,
  "published": "Private",
  "usePreview": 0,
  "tags": [
   "1"
  ],
  "hasliked": 0,
  "parentid": "",
  "parentname": ""
 },
 "renderpass": [
  {
   "inputs": [
    {
     "id": "4dfGRn",
     "filepath": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg",
     "type": "texture",
     "channel": 0,
     "sampler": {
      "filter": "mipmap",
      "wrap": "repeat",
      "vflip": "true",
      "srgb": "false",
      "internal": "byte"
     },
     "published": 1
    }
   ],
   "outputs": [
    {
     "id": "4dfGRr",
     "channel": 0
    }
   ],
   "code": "//add rotation function\n\n#define NUM_LAYERS 4.0\n\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);//keep track of sin angle and cos angle\n    return mat2(c, -s, s, c);//give 2d rotation matrix\n}\n\nfloat Star(vec2 uv, float flare) {\n\tfloat d = length(uv); //distance\n    float m = .05/d;//draw circle\n    \n    //small stars\n    float rays = max(0., 1.-abs(uv.x*uv.y*1000.));\n    m += rays*flare;\n    uv *= Rot(3.1415/4.);//45degree rotation\n    rays = max(0., 1.-abs(uv.x*uv.y*1000.));\n    m += rays*.3*flare;\n    \n    m *= smoothstep(0.5, 0.2, d);\n    return m;\n}\n\n\n//make random position of the stars\nfloat Hash21(vec2 p) {\n    p = fract(p*vec2(123.34, 456.21));\n    p += dot(p, p+45.32);\n    return fract(p.x*p.y);\n}\n\n\n\nvec3 StarLayer(vec2 uv) {\n\tvec3 col = vec3(0);\n\t\n    vec2 gv = fract(uv)-.5;\n    vec2 id = floor(uv);\n    \n    for(int y=-1;y<=1;y++) {\n    \tfor(int x=-1;x<=1;x++) {\n            vec2 offs = vec2(x, y);\n            \n    \t\tfloat n = Hash21(id+offs); // random between 0 and 1\n            float size = fract(n*345.32);\n            \n    \t\tfloat star = Star(gv-offs-vec2(n, fract(n*34.))+.5, smoothstep(.9, 1., size)*.6);\n            \n            vec3 color = sin(vec3(.2, .3, .9)*fract(n*2345.2)*123.2)*.5+.5;\n            color = color*vec3(1,.25,1.+size)+vec3(.2, .2, .1)*2.;\n            \n            star *= sin(iTime*3.+n*6.2831)*.5+1.;\n            col += star*size*color;\n        }\n    }\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tvec2 M = (iMouse.xy-iResolution.xy*.5)/iResolution.y;\n    \n    float t = iTime*.02;\n    \n    \n     uv += M*4.;\n    \n     uv *= Rot(t);\n     //vec3 col = vec3(0);\n     //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2, 4));\n     vec3 col = vec3(uv, 0.4);\n     //vec4 texColor = texture(iChannel0, uv);\n\n     for(float i=0.; i<1.; i+=1./NUM_LAYERS) {\n    \tfloat depth = fract(i+t);\n        \n        float scale = mix(20., .5, depth);\n        float fade = depth*smoothstep(1., .9, depth);\n        col += StarLayer(uv*scale+i*453.2-M)*fade;\n        \n        \n    }\n    \n\n   \n    //if (gv.x > 0.48 || gv.y > 0.48) col.r = 1.0;\n    \n    //col += Hash21(id);\n    \n    //col.rg += id * 0.4;\n    \n    \n \n    \n      \n    \n    \n    \n\n\n    col = pow(col, vec3(0.45));\n\n    // Output to screen\n     fragColor = vec4(col,1.0);\n     //fragColor = vec4(texColor);\n    \n}",
   "name": "Image",
   "description": "",
   "type": "image"
  }
 ]
}